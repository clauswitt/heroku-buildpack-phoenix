#!/usr/bin/env bash

# If this var is set to true later on,
# then elixir and rebar will be rebuilt
erlang_changed=false
rebar_changed=false
elixir_changed=false

build_pack_path=$(cd $(dirname $(dirname $0)); pwd)

# Ensure dirs are present
mkdir -p $1 $2 $3

build_path=$(cd $1 && pwd)
cache_path=$(cd $2 && pwd)
env_path=$(cd $3 && pwd)
heroku_path=$build_path/.heroku
mkdir -p $heroku_path/node

# elixir builds
source ${build_pack_path}/lib/path_funcs.sh
source ${build_pack_path}/lib/misc_funcs.sh
source ${build_pack_path}/lib/erlang_funcs.sh
source ${build_pack_path}/lib/elixir_funcs.sh
source ${build_pack_path}/lib/app_funcs.sh
# node builds
source ${build_pack_path}/lib/static_funcs.sh

mkdir $(platform_tools_path)

old_node=$(file_contents "$cache_path/node-version")

head "Loading configuration and environment"
load_config
export_config_vars
export_mix_env

cached_node=$cache_path/node-v$node_version-linux-x64.tar.gz

check_stack
clean_cache

head "Installing binaries"
download_erlang
install_erlang

download_elixir
install_elixir
restore_mix
install_hex
install_rebar

download_node
install_node
install_npm

head "Building dependencies"
install_and_cache_npm_deps

restore_app
app_dependencies
copy_hex

compile_app

backup_app
backup_mix

write_profile_d_script
